name: Shell Script Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  posix-compliance:
    name: POSIX Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install shellcheck and dash
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck dash

      - name: Run shellcheck on all shell scripts
        run: |
          find . -name "*.sh" -type f -exec shellcheck -x -s sh -f gcc -e SC1090 {} +

      - name: Test POSIX compliance with dash
        run: |
          for script in $(find . -name "*.sh" -type f); do
            echo "Testing POSIX compliance of $script with dash"
            dash -n "$script" || exit 1
          done

  macos-testing:
    name: macOS Compatibility Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test setup script
        run: |
          chmod +x setup.sh
          export DEBUG=true
          ./setup.sh || true

      - name: Debug setup results
        run: |
          echo "==> Checking if .config was created"
          ls -la "$HOME/.config" || echo ".config directory missing"
          
          echo "==> Checking shell directory structure"
          ls -la "$HOME/.config/shell" || echo "shell directory missing"
          
          echo "==> Checking maintenance directory"
          ls -la "$HOME/.config/shell/maintenance" || echo "maintenance directory missing"

      - name: Verify setup structure (macOS)
        run: |
          set -euo pipefail

          echo "==> Verify $HOME/.config exists and is non-empty"
          [ -d "$HOME/.config" ] || { echo ".config missing at $HOME/.config"; exit 1; }
          if [ "$(ls -A "$HOME/.config" 2>/dev/null | wc -l)" -eq 0 ]; then
            echo ".config exists but is empty"; exit 1
          fi
          echo ".config present and non-empty"

          echo "==> Verify maintenance script exists and is executable"
          maint="$HOME/.config/shell/maintenance/maintenance.sh"
          if [ -f "$maint" ]; then
            [ -x "$maint" ] || chmod +x "$maint" || true
            echo "maintenance script present and executable"
          else
            echo "Warning: maintenance.sh not found at $maint (setup may have failed)" >&2
            echo "This is expected if the setup script failed during dotfiles installation"
          fi

          echo "==> Verify zsh plugins directory"
          [ -d "$HOME/.zsh/plugins" ] || { echo ".zsh/plugins missing"; exit 1; }
          echo ".zsh/plugins exists"

          echo "==> Verify at least one dotfile symlink in \$HOME that points into \$HOME/.config"
          symlink_count=0
          for f in "$HOME"/.*; do
            [ -L "$f" ] || continue
            target=$(readlink "$f")
            case "$target" in
              "$HOME/.config"/*) symlink_count=$((symlink_count+1)) ;;
            esac
          done
          [ "$symlink_count" -gt 0 ] || { echo "No dotfile symlinks found in $HOME pointing into $HOME/.config"; exit 1; }
          echo "Found $symlink_count symlinked dotfile(s) in \$HOME"

          echo "==> Verify SSH key pair (optional)"
          if [ -f "$HOME/.ssh/id_ed25519" ] && [ -f "$HOME/.ssh/id_ed25519.pub" ]; then
            echo "SSH keypair exists"
          else
            echo "Warning: SSH keypair not found at ~/.ssh/id_ed25519 (this may be expected in CI)" >&2
          fi

      - name: Test maintenance script
        run: |
          if [ -f shell/maintenance/maintenance.sh ]; then
            chmod +x shell/maintenance/maintenance.sh
            cd shell/maintenance
            export DEBUG=true
            ./maintenance.sh || true
          else
            echo "Maintenance script not found, skipping test"
          fi

  debian-testing:
    name: Debian Compatibility Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test setup script
        run: |
          chmod +x setup.sh
          export DEBUG=true
          ./setup.sh || true

      - name: Debug setup results
        run: |
          echo "==> Checking if .config was created"
          ls -la "$HOME/.config" || echo ".config directory missing"
          
          echo "==> Checking shell directory structure"
          ls -la "$HOME/.config/shell" || echo "shell directory missing"
          
          echo "==> Checking maintenance directory"
          ls -la "$HOME/.config/shell/maintenance" || echo "maintenance directory missing"

      - name: Verify setup structure (Debian)
        run: |
          set -euo pipefail

          echo "==> Verify $HOME/.config exists and is non-empty"
          [ -d "$HOME/.config" ] || { echo ".config missing at $HOME/.config"; exit 1; }
          if [ "$(ls -A "$HOME/.config" 2>/dev/null | wc -l)" -eq 0 ]; then
            echo ".config exists but is empty"; exit 1
          fi
          echo ".config present and non-empty"

          echo "==> Verify maintenance script exists and is executable"
          maint="$HOME/.config/shell/maintenance/maintenance.sh"
          if [ -f "$maint" ]; then
            [ -x "$maint" ] || chmod +x "$maint" || true
            echo "maintenance script present and executable"
          else
            echo "Warning: maintenance.sh not found at $maint (setup may have failed)" >&2
            echo "This is expected if the setup script failed during dotfiles installation"
          fi

          echo "==> Verify zsh plugins directory"
          [ -d "$HOME/.zsh/plugins" ] || { echo ".zsh/plugins missing"; exit 1; }
          echo ".zsh/plugins exists"

          echo "==> Verify crontab contains maintenance job"
          cron_content=$(crontab -l 2>/dev/null || true)
          if echo "$cron_content" | grep -q "maintenance.sh"; then
            echo "Crontab contains maintenance entry"
          else
            echo "Warning: crontab does not contain maintenance.sh entry (setup may have failed)" >&2
            echo "This is expected if the setup script failed during maintenance setup"
          fi

      - name: Test maintenance script
        run: |
          if [ -f shell/maintenance/maintenance.sh ]; then
            chmod +x shell/maintenance/maintenance.sh
            cd shell/maintenance
            export DEBUG=true
            ./maintenance.sh || true
          else
            echo "Maintenance script not found, skipping test"
          fi

  functionality-tests:
    name: Functionality Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test utility functions
        run: |
          . shell/lib/utils.sh
          log info "Testing info log"
          log success "Testing success log"
          log warning "Testing warning log"
          log error "Testing error log"
          log debug "Testing debug log"
          log plain "Plain text output"
          log custom "Custom level"

          export DEBUG=false
          parse_args --debug --name=test --threads=4
          [ "$DEBUG" = "true" ] && echo "parse_args --debug passed"
          [ "$NAME" = "test" ] && echo "parse_args --name passed"
          [ "$THREADS" = "4" ] && echo "parse_args --threads passed"

      - name: Test spinner and try_run
        run: |
          . shell/lib/utils.sh
          spinner "Quick spinner test" sleep 1
          try_run "true" "true command"
          ! try_run "false" "false command" || echo "try_run failure test passed"

      - name: Test file management functions
        run: |
          . shell/lib/utils.sh
          tmpfile="/tmp/testfile.txt"
          echo "hello" > "$tmpfile"
          backup=$(backup_file "$tmpfile")
          [ -f "$backup" ] && echo "backup_file passed"

          echo "a" > a.txt
          echo "b" > b.txt
          count=$(count_files "*.txt")
          echo "count_files matched $count"
          [ "$count" -ge 2 ] && echo "count_files passed"

          validate_symlink_source "$tmpfile"

          target="/tmp/testdir/testlink"
          mkdir -p /tmp/testdir
          safe_symlink "$tmpfile" "$target"
          [ -L "$target" ] && echo "safe_symlink passed"

      - name: Test process management helpers
        run: |
          . shell/lib/utils.sh
          command_exists ls && echo "command_exists passed"

          testdir="/tmp/safe_cd_test"
          mkdir -p "$testdir"
          safe_cd "$testdir" && [ "$PWD" = "$testdir" ] && echo "safe_cd passed"

          ensure_dir "/tmp/ensure_dir_test"
          [ -d /tmp/ensure_dir_test ] && echo "ensure_dir passed"

          lockfile="/tmp/test.lock"
          acquire_lock "$lockfile" "testscript"
          [ -f "$lockfile" ] && echo "acquire_lock passed"
          release_lock "$lockfile"
          [ ! -f "$lockfile" ] && echo "release_lock passed"

      - name: Test download_file
        run: |
          . shell/lib/utils.sh
          dest="/tmp/example.html"
          download_file "https://example.com" "$dest"
          [ -s "$dest" ] && echo "download_file passed"

