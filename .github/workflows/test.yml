name: Setup Environment Test

on:
  push:
    branches: [main]
    paths:
      - 'setup.sh'
      - 'scripts/utils.sh'
      - 'Dockerfile'
      - 'colors/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [main]
    paths:
      - 'setup.sh'
      - 'scripts/utils.sh'
      - 'Dockerfile'
      - 'colors/**'
      - '.github/workflows/test.yml'

jobs:
  validate-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install shellcheck and shfmt
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt

      - name: Ensure utils script is downloaded
        run: |
          url="https://raw.githubusercontent.com/maclong9/dots/refs/heads/main/scripts/utils.sh"
          curl -fsSL "$url" -o /tmp/utils.sh || {
            printf "\033[0;31m[ERROR]\033[0m Failed to download utils.sh\n" >&2
            exit 1
          }
        
      - name: Run shellcheck on setup.sh
        run: shellcheck -x setup.sh

      - name: Run shellcheck on utils.sh
        run: shellcheck scripts/utils.sh

      - name: Check script formatting with shfmt
        run: |
          shfmt -d -i 0 -ci -s setup.sh
          shfmt -d -i 0 -ci -s scripts/utils.sh

      - name: Verify line length limits
        run: |
          if grep -n '.\{81,\}' setup.sh; then
            echo "Lines over 80 characters found in setup.sh"
            exit 1
          fi
          if grep -n '.\{81,\}' scripts/utils.sh; then
            echo "Lines over 80 characters found in utils.sh"
            exit 1
          fi

  test-setup:
    needs: validate-scripts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            /tmp/utils.sh
          key: setup-deps-${{ runner.os }}-${{ hashFiles('setup.sh', 'scripts/utils.sh') }}
          restore-keys: |
            setup-deps-${{ runner.os }}-

      - name: Verify script checksums
        shell: sh
        run: |
          # Calculate checksums for critical files
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 setup.sh scripts/utils.sh > checksums.txt
          elif command -v sha256sum >/dev/null 2>&1; then
            sha256sum setup.sh scripts/utils.sh > checksums.txt
          fi
          cat checksums.txt

      - name: Make scripts executable
        shell: sh
        run: |
          chmod +x ./setup.sh
          chmod +x ./scripts/utils.sh

      - name: Run setup script (dry run first)
        shell: sh
        run: |
          # Test script can parse arguments
          ./setup.sh --help || echo "Help not implemented"
          ./setup.sh --debug --dry-run || echo "Dry run not implemented"

      - name: Run setup script
        shell: sh
        env:
          CI: true
        run: |
          ./setup.sh --debug

      - name: Verify directories created
        shell: sh
        run: |
          # Check development directories as defined in setup.sh
          dirs="$HOME/Developer/personal $HOME/Developer/clients"
          dirs="$dirs $HOME/Developer/study $HOME/Developer/work"
          
          for dir in $dirs; do
            if [ ! -d "$dir" ]; then
              printf "Missing directory: %s\n" "$dir"
              exit 1
            fi
            printf "✓ Directory exists: %s\n" "$dir"
          done

      - name: Verify symlinked dotfiles
        shell: sh
        run: |
          # Check for any dotfiles that were symlinked from .config
          dotfile_count=0
          for file in "$HOME/.config"/.*; do
            [ -f "$file" ] || continue
            filename="$(basename "$file")"
            case "$filename" in
              . | .. | .git) continue ;;
              *) 
                target="$HOME/$filename"
                if [ -e "$target" ]; then
                  if [ -L "$target" ]; then
                    printf "✓ Symlinked: %s\n" "$filename"
                    dotfile_count=$((dotfile_count + 1))
                  else
                    printf "⚠ %s exists but is not a symlink\n" "$target"
                  fi
                fi
                ;;
            esac
          done
          printf "Found %d symlinked dotfiles\n" "$dotfile_count"

      - name: Verify color setup
        shell: sh
        run: |
          # Check if colors directory exists in repo
          if [ -d "colors" ]; then
            printf "✓ Colors directory found in repo\n"
            
            # Verify vim colors directory was created
            if [ ! -d "$HOME/.vim/colors" ]; then
              printf "✗ ~/.vim/colors directory missing\n"
              exit 1
            fi
            printf "✓ Vim colors directory created\n"
            
            # Check if color schemes were symlinked
            repo_vim_count=$(find colors -name "*.vim" -type f 2>/dev/null | wc -l)
            installed_vim_count=$(find "$HOME/.vim/colors" -name "*.vim" -type f 2>/dev/null | wc -l)
            printf "Color schemes: %d in repo, %d installed\n" "$repo_vim_count" "$installed_vim_count"
            
            # On macOS, check Xcode themes
            if [ "$RUNNER_OS" = "macOS" ]; then
              xcode_dir="$HOME/Library/Developer/Xcode/UserData/FontAndColorThemes"
              if [ -d "$xcode_dir" ]; then
                xcode_count=$(find "$xcode_dir" -name "*.xccolortheme" -type f 2>/dev/null | wc -l)
                printf "✓ Xcode themes directory exists with %d themes\n" "$xcode_count"
              fi
            fi
          else
            printf "No colors directory in repo\n"
          fi

      - name: Verify SSH setup
        shell: sh
        run: |
          # Check SSH key generation
          if [ ! -f "$HOME/.ssh/id_ed25519" ]; then
            printf "✗ SSH private key missing\n"
            exit 1
          fi
          printf "✓ SSH private key exists\n"
          
          if [ ! -f "$HOME/.ssh/id_ed25519.pub" ]; then
            printf "✗ SSH public key missing\n"
            exit 1
          fi
          printf "✓ SSH public key exists\n"
          
          # Check SSH directory permissions
          ssh_perms=$(stat -c "%a" "$HOME/.ssh" 2>/dev/null || stat -f "%A" "$HOME/.ssh" 2>/dev/null)
          if [ "$ssh_perms" != "700" ]; then
            printf "⚠ SSH directory permissions: %s (expected 700)\n" "$ssh_perms"
          else
            printf "✓ SSH directory permissions correct\n"
          fi
          
          # Check SSH config file
          if [ -f "$HOME/.ssh/config" ]; then
            printf "✓ SSH config file exists\n"
            if grep -q "github.com" "$HOME/.ssh/config"; then
              printf "✓ GitHub SSH config found\n"
            fi
          fi

      - name: Test shell functions
        shell: sh
        run: |
          # Source the utilities and test key functions
          . ./scripts/utils.sh

          # Test logging functions
          log info "Testing info log"
          log success "Testing success log"
          log warning "Testing warning log"
          log error "Testing error log"
          log debug "Testing debug log"

          # Test utility functions
          ensure_directory "/tmp/test_dir"
          if [ ! -d "/tmp/test_dir" ]; then
            printf "ensure_directory failed\n"
            exit 1
          fi

          # Test file counting
          touch /tmp/test1.txt /tmp/test2.txt
          count=$(count_files "/tmp/test*.txt")
          if [ "$count" -ne 2 ]; then
            printf "count_files failed: expected 2, got %s\n" "$count"
            exit 1
          fi

      - name: Test shell configuration
        shell: zsh {0}
        if: matrix.os == 'macos-latest'
        run: |
          # Check if zshrc was symlinked and is sourceable
          if [ -f "$HOME/.zshrc" ]; then
            printf "✓ .zshrc exists\n"
            # Attempt to source it (might fail in CI, that's OK)
            if source ~/.zshrc 2>/dev/null; then
              printf "✓ .zshrc sources successfully\n"
              
              # Test completion functions if they exist
              if type _dev_completion >/dev/null 2>&1; then
                printf "✓ dev completion function loaded\n"
              fi
              
              if type _cdi_completion >/dev/null 2>&1; then
                printf "✓ cdi completion function loaded\n"
              fi
            else
              printf "⚠ .zshrc failed to source (may be expected in CI)\n"
            fi
          else
            printf "No .zshrc found\n"
          fi

      - name: Verify Git configuration
        shell: sh
        run: |
          # Check if gitconfig was symlinked
          if [ -f "$HOME/.gitconfig" ]; then
            printf "✓ .gitconfig exists\n"
            
            # Check Git signing configuration (may not be set in CI)
            signing_key=$(git config --global user.signingkey 2>/dev/null || echo "")
            if [ -n "$signing_key" ]; then
              printf "✓ Git signing key configured: %s\n" "$signing_key"
            else
              printf "No Git signing key configured (expected in CI)\n"
            fi

            # Check commit signing setting
            gpg_sign=$(git config --global commit.gpgsign 2>/dev/null || echo "")
            if [ "$gpg_sign" = "true" ]; then
              printf "✓ Git commit signing enabled\n"
            else
              printf "Git commit signing not enabled (may be expected in CI)\n"
            fi
            
            # Check other git config
            user_name=$(git config --global user.name 2>/dev/null || echo "")
            user_email=$(git config --global user.email 2>/dev/null || echo "")
            if [ -n "$user_name" ]; then
              printf "✓ Git user.name: %s\n" "$user_name"
            fi
            if [ -n "$user_email" ]; then
              printf "✓ Git user.email: %s\n" "$user_email"
            fi
          else
            printf "No .gitconfig found\n"
          fi

      - name: Test macOS-specific features
        if: matrix.os == 'macos-latest'
        shell: sh
        run: |
          printf "=== macOS-specific tests ===\n"
          
          # Check Touch ID configuration (read-only test)
          if [ -f "/etc/pam.d/sudo_local" ]; then
            printf "✓ Touch ID config file exists\n"
            if grep -q "pam_tid.so" "/etc/pam.d/sudo_local" 2>/dev/null; then
              printf "✓ Touch ID configuration found\n"
            fi
          else
            printf "Touch ID config not found (may require sudo)\n"
          fi
          
          # Check container tool (if installed)
          if command -v container >/dev/null 2>&1; then
            printf "✓ Container tool installed\n"
            container --version || true
          else
            printf "Container tool not installed (expected in CI)\n"
          fi
          
          # Check Dockerfile exists
          if [ -f "Dockerfile" ]; then
            printf "✓ Dockerfile exists\n"
          else
            printf "No Dockerfile found\n"
          fi

      - name: Debug information on failure
        if: failure()
        shell: sh
        run: |
          printf "=== Debug Information ===\n"
          printf "OS: %s\n" "$RUNNER_OS"
          printf "PWD: %s\n" "$(pwd)"
          printf "HOME: %s\n" "$HOME"
          
          printf "\n=== Repository contents ===\n"
          ls -la . || true
          
          printf "\n=== Home directory contents ===\n"
          ls -la "$HOME" | head -20 || true
          
          printf "\n=== Config directory ===\n"
          if [ -d "$HOME/.config" ]; then
            ls -la "$HOME/.config" || true
          else
            printf "~/.config does not exist\n"
          fi
          
          printf "\n=== SSH directory ===\n"
          if [ -d "$HOME/.ssh" ]; then
            ls -la "$HOME/.ssh" || true
          else
            printf "~/.ssh does not exist\n"
          fi
          
          printf "\n=== Developer directories ===\n"
          if [ -d "$HOME/Developer" ]; then
            find "$HOME/Developer" -type d 2>/dev/null | head -10 || true
          else
            printf "~/Developer does not exist\n"
          fi
          
          printf "\n=== Vim colors directory ===\n"
          if [ -d "$HOME/.vim/colors" ]; then
            ls -la "$HOME/.vim/colors" || true
          else
            printf "~/.vim/colors does not exist\n"
          fi
          
          printf "\n=== Git configuration ===\n"
          git config --global --list 2>/dev/null | head -20 || printf "No git config found\n"
          
          printf "\n=== Environment variables ===\n"
          env | grep -E '^(HOME|USER|SHELL|PATH)=' || true
          
          printf "\n=== Process list (setup related) ===\n"
          ps aux | grep -E '(setup|git|ssh)' | grep -v grep || true
